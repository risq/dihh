THREE.CopyShader={uniforms:{tDiffuse:{type:"t",value:null},opacity:{type:"f",value:1}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform float opacity;","uniform sampler2D tDiffuse;","varying vec2 vUv;","void main() {","vec4 texel = texture2D( tDiffuse, vUv );","gl_FragColor = opacity * texel;","}"].join("\n")},THREE.DoFShader={uniforms:{tDiffuse:{type:"t",value:null},tDepth:{type:"t",value:null},znear:{type:"f",value:1},zfar:{type:"f",value:1e3},size:{type:"v2",value:new THREE.Vector2(512,512)},textel:{type:"v2",value:new THREE.Vector2(1/512,1/512)},focalDepth:{type:"f",value:200},focalLength:{type:"f",value:28},fstop:{type:"f",value:2.8},showFocus:{type:"i",value:0},manualdof:{type:"i",value:0},ndofstart:{type:"f",value:1},ndofdist:{type:"f",value:2},fdofstart:{type:"f",value:1},fdofdist:{type:"f",value:3},CoC:{type:"f",value:.03},vignetting:{type:"i",value:1},vignout:{type:"f",value:1.3},vignin:{type:"f",value:0},vignfade:{type:"f",value:22},autofocus:{type:"i",value:1},focus:{type:"v2",value:new THREE.Vector2(.5,.5)},maxblur:{type:"f",value:1},threshold:{type:"f",value:.8},gain:{type:"f",value:1.7},bias:{type:"f",value:.5},fringe:{type:"f",value:.7},noise:{type:"i",value:1},namount:{type:"f",value:1e-4},depthblur:{type:"i",value:0},dbsize:{type:"f",value:1.25}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["precision mediump float;","#define PI  3.14159265","varying vec2 vUv;","uniform sampler2D tDiffuse;","uniform sampler2D tDepth;","uniform vec2 size;","uniform vec2 texel;","uniform float focalDepth;","uniform float focalLength;","uniform float fstop;","uniform bool showFocus;","uniform float znear;","uniform float zfar;","uniform bool manualdof;","uniform float ndofstart;","uniform float ndofdist;","uniform float fdofstart;","uniform float fdofdist;","uniform float CoC;","uniform bool vignetting;","uniform float vignout;","uniform float vignin;","uniform float vignfade;","uniform bool autofocus;","uniform vec2 focus;","uniform float maxblur;","uniform float threshold;","uniform float gain;","uniform float bias;","uniform float fringe;","uniform bool noise;","uniform float namount;","uniform bool depthblur;","uniform float dbsize;","int samples = 3;","const int rings = 3;","bool pentagon = false;","float feather = 0.4;","float unpackDepth( const in vec4 rgba_depth ) {","const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );","float depth = dot( rgba_depth, bit_shift );","return depth;","}","float penta(vec2 coords)","{","float scale = float(rings) - 1.3;","vec4  HS0 = vec4( 1.0,         0.0,         0.0,  1.0);","vec4  HS1 = vec4( 0.309016994, 0.951056516, 0.0,  1.0);","vec4  HS2 = vec4(-0.809016994, 0.587785252, 0.0,  1.0);","vec4  HS3 = vec4(-0.809016994,-0.587785252, 0.0,  1.0);","vec4  HS4 = vec4( 0.309016994,-0.951056516, 0.0,  1.0);","vec4  HS5 = vec4( 0.0        ,0.0         , 1.0,  1.0);","vec4  one = vec4( 1.0 );","vec4 P = vec4((coords),vec2(scale, scale));","vec4 dist = vec4(0.0);","float inorout = -4.0;","dist.x = dot( P, HS0 );","dist.y = dot( P, HS1 );","dist.z = dot( P, HS2 );","dist.w = dot( P, HS3 );","dist = smoothstep( -feather, feather, dist );","inorout += dot( dist, one );","dist.x = dot( P, HS4 );","dist.y = HS5.w - abs( P.z );","dist = smoothstep( -feather, feather, dist );","inorout += dist.x;","return clamp( inorout, 0.0, 1.0 );","}","float bdepth(vec2 coords) //blurring depth","{","float d = 0.0;","float kernel[9];","vec2 offset[9];","vec2 wh = vec2(texel.x, texel.y) * dbsize;","offset[0] = vec2(-wh.x,-wh.y);","offset[1] = vec2( 0.0, -wh.y);","offset[2] = vec2( wh.x -wh.y);","offset[3] = vec2(-wh.x,  0.0);","offset[4] = vec2( 0.0,   0.0);","offset[5] = vec2( wh.x,  0.0);","offset[6] = vec2(-wh.x, wh.y);","offset[7] = vec2( 0.0,  wh.y);","offset[8] = vec2( wh.x, wh.y);","kernel[0] = 1.0/16.0;   kernel[1] = 2.0/16.0;   kernel[2] = 1.0/16.0;","kernel[3] = 2.0/16.0;   kernel[4] = 4.0/16.0;   kernel[5] = 2.0/16.0;","kernel[6] = 1.0/16.0;   kernel[7] = 2.0/16.0;   kernel[8] = 1.0/16.0;","for( int i=0; i<9; i++ )","{","float tmp = unpackDepth(texture2D(tDepth, coords + offset[i]));","d += tmp * kernel[i];","}","return d;","}","vec3 color(vec2 coords,float blur)","{","vec3 col = vec3(0.0);","col.r = texture2D(tDiffuse,coords + vec2(0.0,1.0)*texel*fringe*blur).r;","col.g = texture2D(tDiffuse,coords + vec2(-0.866,-0.5)*texel*fringe*blur).g;","col.b = texture2D(tDiffuse,coords + vec2(0.866,-0.5)*texel*fringe*blur).b;","vec3 lumcoeff = vec3(0.299,0.587,0.114);","float lum = dot(col.rgb, lumcoeff);","float thresh = max((lum-threshold)*gain, 0.0);","return col+mix(vec3(0.0),col,thresh*blur);","}","vec2 rand(vec2 coord) //generating noise/pattern texture for dithering","{","float noiseX = ((fract(1.0-coord.s*(size.x/2.0))*0.25)+(fract(coord.t*(size.y/2.0))*0.75))*2.0-1.0;","float noiseY = ((fract(1.0-coord.s*(size.x/2.0))*0.75)+(fract(coord.t*(size.y/2.0))*0.25))*2.0-1.0;","if (noise)","{","noiseX = clamp(fract(sin(dot(coord ,vec2(12.9898,78.233))) * 43758.5453),0.0,1.0)*2.0-1.0;","noiseY = clamp(fract(sin(dot(coord ,vec2(12.9898,78.233)*2.0)) * 43758.5453),0.0,1.0)*2.0-1.0;","}","return vec2(noiseX,noiseY);","}","vec3 debugFocus(vec3 col, float blur, float depth)","{","float edge = 0.002*depth; //distance based edge smoothing","float m = clamp(smoothstep(0.0,edge,blur),0.0,1.0);","float e = clamp(smoothstep(1.0-edge,1.0,blur),0.0,1.0);","col = mix(col,vec3(1.0,0.5,0.0),(1.0-m)*0.6);","col = mix(col,vec3(0.0,0.5,1.0),((1.0-e)-(1.0-m))*0.2);","return col;","}","float linearize(float depth)","{","return -zfar * znear / (depth * (zfar - znear) - zfar);","}","float vignette()","{","float dist = distance(vUv, vec2(0.5,0.5));","dist = smoothstep(vignout+(fstop/vignfade), vignin+(fstop/vignfade), dist);","return clamp(dist,0.0,1.0);","}","void main()","{","float depth = linearize(unpackDepth(texture2D(tDepth,vUv)));","if (depthblur)","{","depth = linearize(bdepth(vUv));","}","float fDepth = focalDepth;","if (autofocus)","{","fDepth = linearize(unpackDepth(texture2D(tDepth,focus)));","}","float blur = 0.0;","if (manualdof)","{","float a = depth-fDepth;","float b = (a-fdofstart)/fdofdist;","float c = (-a-ndofstart)/ndofdist;","blur = (a>0.0)?b:c;","}","else","{","float f = focalLength;","float d = fDepth*1000.0;","float o = depth*1000.0;","float a = (o*f)/(o-f);","float b = (d*f)/(d-f);","float c = (d-f)/(d*fstop*CoC);","blur = abs(a-b)*c;","}","blur = clamp(blur,0.0,1.0);","vec2 noise = rand(vUv)*namount*blur;","float w = (1.0/size.x)*blur*maxblur+noise.x;","float h = (1.0/size.y)*blur*maxblur+noise.y;","vec3 col = vec3(0.0);","if(blur < 0.05)","{","col = texture2D(tDiffuse, vUv).rgb;","}","else","{","col = texture2D(tDiffuse, vUv).rgb;","float s = 1.0;","for (int i = 1; i <= rings; i += 1)","{","float ringsamples = float(i * samples);","if(i == 1)","{","for (int j = 0 ; j < 3 ; j += 1)","{","float step = PI*2.0 / float(ringsamples);","float pw = (cos(float(j)*step)*float(i));","float ph = (sin(float(j)*step)*float(i));","float p = 1.0;","if (pentagon)","{","p = penta(vec2(pw,ph));","}","col += color(vUv + vec2(pw*w,ph*h),blur)*mix(1.0,(float(i))/(float(rings)),bias)*p;","s += 1.0*mix(1.0,(float(i))/(float(rings)),bias)*p;","}","}","else if(i == 2)","{","for (int j = 0 ; j < 6 ; j += 1)","{","float step = PI*2.0 / float(ringsamples);","float pw = (cos(float(j)*step)*float(i));","float ph = (sin(float(j)*step)*float(i));","float p = 1.0;","if (pentagon)","{","p = penta(vec2(pw,ph));","}","col += color(vUv + vec2(pw*w,ph*h),blur)*mix(1.0,(float(i))/(float(rings)),bias)*p;","s += 1.0*mix(1.0,(float(i))/(float(rings)),bias)*p;","}","}","else if(i == 3)","{","for (int j = 0 ; j < 9 ; j += 1)","{","float step = PI*2.0 / float(ringsamples);","float pw = (cos(float(j)*step)*float(i));","float ph = (sin(float(j)*step)*float(i));","float p = 1.0;","if (pentagon)","{","p = penta(vec2(pw,ph));","}","col += color(vUv + vec2(pw*w,ph*h),blur)*mix(1.0,(float(i))/(float(rings)),bias)*p;","s += 1.0*mix(1.0,(float(i))/(float(rings)),bias)*p;","}","}","}","col /= s;","}","if (showFocus)","{","col = debugFocus(col, blur, depth);","}","if (vignetting)","{","col *= vignette();","}","gl_FragColor.rgb = col;","gl_FragColor.a = 1.0;","}"].join("\n")},THREE.EffectComposer=function(e,t){if(this.renderer=e,void 0===t){var r=window.innerWidth||1,o=window.innerHeight||1,i={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBFormat,stencilBuffer:!1};t=new THREE.WebGLRenderTarget(r,o,i)}this.renderTarget1=t,this.renderTarget2=t.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2,this.passes=[],void 0===THREE.CopyShader&&console.error("THREE.EffectComposer relies on THREE.CopyShader"),this.copyPass=new THREE.ShaderPass(THREE.CopyShader)},THREE.EffectComposer.prototype={swapBuffers:function(){var e=this.readBuffer;this.readBuffer=this.writeBuffer,this.writeBuffer=e},addPass:function(e){this.passes.push(e)},insertPass:function(e,t){this.passes.splice(t,0,e)},render:function(e){this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2;var t,r,o=!1,i=this.passes.length;for(r=0;i>r;r++)if(t=this.passes[r],t.enabled){if(t.render(this.renderer,this.writeBuffer,this.readBuffer,e,o),t.needsSwap){if(o){var a=this.renderer.context;a.stencilFunc(a.NOTEQUAL,1,4294967295),this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,e),a.stencilFunc(a.EQUAL,1,4294967295)}this.swapBuffers()}t instanceof THREE.MaskPass?o=!0:t instanceof THREE.ClearMaskPass&&(o=!1)}},reset:function(e){void 0===e&&(e=this.renderTarget1.clone(),e.width=window.innerWidth,e.height=window.innerHeight),this.renderTarget1=e,this.renderTarget2=e.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2},setSize:function(e,t){var r=this.renderTarget1.clone();r.width=e,r.height=t,this.reset(r)}},THREE.FXAAShader={uniforms:{tDiffuse:{type:"t",value:null},resolution:{type:"v2",value:new THREE.Vector2(1/1024,1/512)}},vertexShader:["void main() {","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","uniform vec2 resolution;","#define FXAA_REDUCE_MIN   (1.0/128.0)","#define FXAA_REDUCE_MUL   (1.0/8.0)","#define FXAA_SPAN_MAX     8.0","void main() {","vec3 rgbNW = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( -1.0, -1.0 ) ) * resolution ).xyz;","vec3 rgbNE = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( 1.0, -1.0 ) ) * resolution ).xyz;","vec3 rgbSW = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( -1.0, 1.0 ) ) * resolution ).xyz;","vec3 rgbSE = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( 1.0, 1.0 ) ) * resolution ).xyz;","vec4 rgbaM  = texture2D( tDiffuse,  gl_FragCoord.xy  * resolution );","vec3 rgbM  = rgbaM.xyz;","vec3 luma = vec3( 0.299, 0.587, 0.114 );","float lumaNW = dot( rgbNW, luma );","float lumaNE = dot( rgbNE, luma );","float lumaSW = dot( rgbSW, luma );","float lumaSE = dot( rgbSE, luma );","float lumaM  = dot( rgbM,  luma );","float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );","float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );","vec2 dir;","dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));","dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));","float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );","float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );","dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),","max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),","dir * rcpDirMin)) * resolution;","vec4 rgbA = (1.0/2.0) * (","texture2D(tDiffuse,  gl_FragCoord.xy  * resolution + dir * (1.0/3.0 - 0.5)) +","texture2D(tDiffuse,  gl_FragCoord.xy  * resolution + dir * (2.0/3.0 - 0.5)));","vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (","texture2D(tDiffuse,  gl_FragCoord.xy  * resolution + dir * (0.0/3.0 - 0.5)) +","texture2D(tDiffuse,  gl_FragCoord.xy  * resolution + dir * (3.0/3.0 - 0.5)));","float lumaB = dot(rgbB, vec4(luma, 0.0));","if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {","gl_FragColor = rgbA;","} else {","gl_FragColor = rgbB;","}","}"].join("\n")},THREE.MaskPass=function(e,t){this.scene=e,this.camera=t,this.enabled=!0,this.clear=!0,this.needsSwap=!1,this.inverse=!1},THREE.MaskPass.prototype={render:function(e,t,r){var o=e.context;o.colorMask(!1,!1,!1,!1),o.depthMask(!1);var i,a;this.inverse?(i=0,a=1):(i=1,a=0),o.enable(o.STENCIL_TEST),o.stencilOp(o.REPLACE,o.REPLACE,o.REPLACE),o.stencilFunc(o.ALWAYS,i,4294967295),o.clearStencil(a),e.render(this.scene,this.camera,r,this.clear),e.render(this.scene,this.camera,t,this.clear),o.colorMask(!0,!0,!0,!0),o.depthMask(!0),o.stencilFunc(o.EQUAL,1,4294967295),o.stencilOp(o.KEEP,o.KEEP,o.KEEP)}},THREE.ClearMaskPass=function(){this.enabled=!0},THREE.ClearMaskPass.prototype={render:function(e){var t=e.context;t.disable(t.STENCIL_TEST)}},THREE.RenderableObject=function(){this.id=0,this.object=null,this.z=0},THREE.RenderableFace=function(){this.id=0,this.v1=new THREE.RenderableVertex,this.v2=new THREE.RenderableVertex,this.v3=new THREE.RenderableVertex,this.normalModel=new THREE.Vector3,this.vertexNormalsModel=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3],this.vertexNormalsLength=0,this.color=new THREE.Color,this.material=null,this.uvs=[new THREE.Vector2,new THREE.Vector2,new THREE.Vector2],this.z=0},THREE.RenderableVertex=function(){this.position=new THREE.Vector3,this.positionWorld=new THREE.Vector3,this.positionScreen=new THREE.Vector4,this.visible=!0},THREE.RenderableVertex.prototype.copy=function(e){this.positionWorld.copy(e.positionWorld),this.positionScreen.copy(e.positionScreen)},THREE.RenderableLine=function(){this.id=0,this.v1=new THREE.RenderableVertex,this.v2=new THREE.RenderableVertex,this.vertexColors=[new THREE.Color,new THREE.Color],this.material=null,this.z=0},THREE.RenderableSprite=function(){this.id=0,this.object=null,this.x=0,this.y=0,this.z=0,this.rotation=0,this.scale=new THREE.Vector2,this.material=null},THREE.Projector=function(){function e(){if(l===x){var e=new THREE.RenderableObject;return g.push(e),x++,l++,e}return g[l++]}function t(){if(c===b){var e=new THREE.RenderableVertex;return y.push(e),b++,c++,e}return y[c++]}function r(){if(p===T){var e=new THREE.RenderableFace;return R.push(e),T++,p++,e}return R[p++]}function o(){if(d===H){var e=new THREE.RenderableLine;return w.push(e),H++,d++,e}return w[d++]}function i(){if(m===M){var e=new THREE.RenderableSprite;return S.push(e),M++,m++,e}return S[m++]}function a(e,t){return e.z!==t.z?t.z-e.z:e.id!==t.id?e.id-t.id:0}function n(e,t){var r=0,o=1,i=e.z+e.w,a=t.z+t.w,n=-e.z+e.w,s=-t.z+t.w;return i>=0&&a>=0&&n>=0&&s>=0?!0:0>i&&0>a||0>n&&0>s?!1:(0>i?r=Math.max(r,i/(i-a)):0>a&&(o=Math.min(o,i/(i-a))),0>n?r=Math.max(r,n/(n-s)):0>s&&(o=Math.min(o,n/(n-s))),r>o?!1:(e.lerp(t,r),t.lerp(e,1-o),!0))}var s,l,f,c,u,p,h,d,v,m,E,g=[],x=0,y=[],b=0,R=[],T=0,w=[],H=0,S=[],M=0,z={objects:[],lights:[],elements:[]},D=new THREE.Vector3,C=new THREE.Vector3,j=new THREE.Vector3,V=new THREE.Vector3,P=new THREE.Vector4,A=new THREE.Box3(new THREE.Vector3(-1,-1,-1),new THREE.Vector3(1,1,1)),F=new THREE.Box3,_=new Array(3),N=(new Array(4),new THREE.Matrix4),k=new THREE.Matrix4,B=new THREE.Matrix4,U=new THREE.Matrix3,W=new THREE.Frustum,L=new THREE.Vector4,X=new THREE.Vector4;this.projectVector=function(e,t){console.warn("THREE.Projector: .projectVector() is now vector.project()."),e.project(t)},this.unprojectVector=function(e,t){console.warn("THREE.Projector: .unprojectVector() is now vector.unproject()."),e.unproject(t)},this.pickingRay=function(){console.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().")};var I=function(){var e=[],i=[],a=null,n=null,s=new THREE.Matrix3,l=function(t){a=t,n=a.material,s.getNormalMatrix(a.matrixWorld),e.length=0,i.length=0},c=function(e){var t=e.position,r=e.positionWorld,o=e.positionScreen;r.copy(t).applyMatrix4(E),o.copy(r).applyMatrix4(k);var i=1/o.w;o.x*=i,o.y*=i,o.z*=i,e.visible=o.x>=-1&&o.x<=1&&o.y>=-1&&o.y<=1&&o.z>=-1&&o.z<=1},p=function(e,r,o){f=t(),f.position.set(e,r,o),c(f)},d=function(t,r,o){e.push(t,r,o)},v=function(e,t){i.push(e,t)},m=function(e,t,r){return e.visible===!0||t.visible===!0||r.visible===!0?!0:(_[0]=e.positionScreen,_[1]=t.positionScreen,_[2]=r.positionScreen,A.isIntersectionBox(F.setFromPoints(_)))},g=function(e,t,r){return(r.positionScreen.x-e.positionScreen.x)*(t.positionScreen.y-e.positionScreen.y)-(r.positionScreen.y-e.positionScreen.y)*(t.positionScreen.x-e.positionScreen.x)<0},x=function(e,t){var r=y[e],i=y[t];h=o(),h.id=a.id,h.v1.copy(r),h.v2.copy(i),h.z=(r.positionScreen.z+i.positionScreen.z)/2,h.material=a.material,z.elements.push(h)},b=function(t,o,l){var f=y[t],c=y[o],p=y[l];if(m(f,c,p)!==!1&&(n.side===THREE.DoubleSide||g(f,c,p)===!0)){u=r(),u.id=a.id,u.v1.copy(f),u.v2.copy(c),u.v3.copy(p),u.z=(f.positionScreen.z+c.positionScreen.z+p.positionScreen.z)/3;for(var h=0;3>h;h++){var d=3*arguments[h],v=u.vertexNormalsModel[h];v.set(e[d],e[d+1],e[d+2]),v.applyMatrix3(s).normalize();var E=2*arguments[h],x=u.uvs[h];x.set(i[E],i[E+1])}u.vertexNormalsLength=3,u.material=a.material,z.elements.push(u)}};return{setObject:l,projectVertex:c,checkTriangleVisibility:m,checkBackfaceCulling:g,pushVertex:p,pushNormal:d,pushUv:v,pushLine:x,pushTriangle:b}},O=new I;this.projectScene=function(f,g,x,b){p=0,d=0,m=0,z.elements.length=0,f.autoUpdate===!0&&f.updateMatrixWorld(),void 0===g.parent&&g.updateMatrixWorld(),N.copy(g.matrixWorldInverse.getInverse(g.matrixWorld)),k.multiplyMatrices(g.projectionMatrix,N),W.setFromMatrix(k),l=0,z.objects.length=0,z.lights.length=0,f.traverseVisible(function(t){if(t instanceof THREE.Light)z.lights.push(t);else if(t instanceof THREE.Mesh||t instanceof THREE.Line||t instanceof THREE.Sprite){if(t.material.visible===!1)return;(t.frustumCulled===!1||W.intersectsObject(t)===!0)&&(s=e(),s.id=t.id,s.object=t,V.setFromMatrixPosition(t.matrixWorld),V.applyProjection(k),s.z=V.z,z.objects.push(s))}}),x===!0&&z.objects.sort(a);for(var R=0,T=z.objects.length;T>R;R++){var w=z.objects[R].object,H=w.geometry;if(O.setObject(w),E=w.matrixWorld,c=0,w instanceof THREE.Mesh){if(H instanceof THREE.BufferGeometry){var S=H.attributes,M=H.offsets;if(void 0===S.position)continue;for(var A=S.position.array,F=0,_=A.length;_>F;F+=3)O.pushVertex(A[F],A[F+1],A[F+2]);if(void 0!==S.normal)for(var I=S.normal.array,F=0,_=I.length;_>F;F+=3)O.pushNormal(I[F],I[F+1],I[F+2]);if(void 0!==S.uv)for(var G=S.uv.array,F=0,_=G.length;_>F;F+=2)O.pushUv(G[F],G[F+1]);if(void 0!==S.index){var Y=S.index.array;if(M.length>0)for(var R=0;R<M.length;R++)for(var q=M[R],K=q.index,F=q.start,_=q.start+q.count;_>F;F+=3)O.pushTriangle(Y[F]+K,Y[F+1]+K,Y[F+2]+K);else for(var F=0,_=Y.length;_>F;F+=3)O.pushTriangle(Y[F],Y[F+1],Y[F+2])}else for(var F=0,_=A.length/3;_>F;F+=3)O.pushTriangle(F,F+1,F+2)}else if(H instanceof THREE.Geometry){var Q=H.vertices,J=H.faces,Z=H.faceVertexUvs[0];U.getNormalMatrix(E);for(var $=w.material instanceof THREE.MeshFaceMaterial,et=$===!0?w.material:null,tt=0,rt=Q.length;rt>tt;tt++){var ot=Q[tt];O.pushVertex(ot.x,ot.y,ot.z)}for(var it=0,at=J.length;at>it;it++){var nt=J[it],st=$===!0?et.materials[nt.materialIndex]:w.material;if(void 0!==st){var lt=st.side,ft=y[nt.a],ct=y[nt.b],ut=y[nt.c];if(st.morphTargets===!0){var pt=H.morphTargets,ht=w.morphTargetInfluences,dt=ft.position,vt=ct.position,mt=ut.position;D.set(0,0,0),C.set(0,0,0),j.set(0,0,0);for(var Et=0,gt=pt.length;gt>Et;Et++){var xt=ht[Et];if(0!==xt){var yt=pt[Et].vertices;D.x+=(yt[nt.a].x-dt.x)*xt,D.y+=(yt[nt.a].y-dt.y)*xt,D.z+=(yt[nt.a].z-dt.z)*xt,C.x+=(yt[nt.b].x-vt.x)*xt,C.y+=(yt[nt.b].y-vt.y)*xt,C.z+=(yt[nt.b].z-vt.z)*xt,j.x+=(yt[nt.c].x-mt.x)*xt,j.y+=(yt[nt.c].y-mt.y)*xt,j.z+=(yt[nt.c].z-mt.z)*xt}}ft.position.add(D),ct.position.add(C),ut.position.add(j),O.projectVertex(ft),O.projectVertex(ct),O.projectVertex(ut)}if(O.checkTriangleVisibility(ft,ct,ut)!==!1){var bt=O.checkBackfaceCulling(ft,ct,ut);if(lt!==THREE.DoubleSide){if(lt===THREE.FrontSide&&bt===!1)continue;if(lt===THREE.BackSide&&bt===!0)continue}u=r(),u.id=w.id,u.v1.copy(ft),u.v2.copy(ct),u.v3.copy(ut),u.normalModel.copy(nt.normal),bt!==!1||lt!==THREE.BackSide&&lt!==THREE.DoubleSide||u.normalModel.negate(),u.normalModel.applyMatrix3(U).normalize();for(var Rt=nt.vertexNormals,Tt=0,wt=Math.min(Rt.length,3);wt>Tt;Tt++){var Ht=u.vertexNormalsModel[Tt];Ht.copy(Rt[Tt]),bt!==!1||lt!==THREE.BackSide&&lt!==THREE.DoubleSide||Ht.negate(),Ht.applyMatrix3(U).normalize()}u.vertexNormalsLength=Rt.length;var St=Z[it];if(void 0!==St)for(var Mt=0;3>Mt;Mt++)u.uvs[Mt].copy(St[Mt]);u.color=nt.color,u.material=st,u.z=(ft.positionScreen.z+ct.positionScreen.z+ut.positionScreen.z)/3,z.elements.push(u)}}}}}else if(w instanceof THREE.Line){if(H instanceof THREE.BufferGeometry){var S=H.attributes;if(void 0!==S.position){for(var A=S.position.array,F=0,_=A.length;_>F;F+=3)O.pushVertex(A[F],A[F+1],A[F+2]);if(void 0!==S.index)for(var Y=S.index.array,F=0,_=Y.length;_>F;F+=2)O.pushLine(Y[F],Y[F+1]);else for(var zt=w.mode===THREE.LinePieces?2:1,F=0,_=A.length/3-1;_>F;F+=zt)O.pushLine(F,F+1)}}else if(H instanceof THREE.Geometry){B.multiplyMatrices(k,E);var Q=w.geometry.vertices;if(0===Q.length)continue;ft=t(),ft.positionScreen.copy(Q[0]).applyMatrix4(B);for(var zt=w.mode===THREE.LinePieces?2:1,tt=1,rt=Q.length;rt>tt;tt++)ft=t(),ft.positionScreen.copy(Q[tt]).applyMatrix4(B),(tt+1)%zt>0||(ct=y[c-2],L.copy(ft.positionScreen),X.copy(ct.positionScreen),n(L,X)===!0&&(L.multiplyScalar(1/L.w),X.multiplyScalar(1/X.w),h=o(),h.id=w.id,h.v1.positionScreen.copy(L),h.v2.positionScreen.copy(X),h.z=Math.max(L.z,X.z),h.material=w.material,w.material.vertexColors===THREE.VertexColors&&(h.vertexColors[0].copy(w.geometry.colors[tt]),h.vertexColors[1].copy(w.geometry.colors[tt-1])),z.elements.push(h)))}}else if(w instanceof THREE.Sprite){P.set(E.elements[12],E.elements[13],E.elements[14],1),P.applyMatrix4(k);var Dt=1/P.w;P.z*=Dt,P.z>=-1&&P.z<=1&&(v=i(),v.id=w.id,v.x=P.x*Dt,v.y=P.y*Dt,v.z=P.z,v.object=w,v.rotation=w.rotation,v.scale.x=w.scale.x*Math.abs(v.x-(P.x+g.projectionMatrix.elements[0])/(P.w+g.projectionMatrix.elements[12])),v.scale.y=w.scale.y*Math.abs(v.y-(P.y+g.projectionMatrix.elements[5])/(P.w+g.projectionMatrix.elements[13])),v.material=w.material,z.elements.push(v))}}return b===!0&&z.elements.sort(a),z}},THREE.RenderPass=function(e,t,r,o,i){this.scene=e,this.camera=t,this.overrideMaterial=r,this.clearColor=o,this.clearAlpha=void 0!==i?i:1,this.oldClearColor=new THREE.Color,this.oldClearAlpha=1,this.enabled=!0,this.clear=!0,this.needsSwap=!1},THREE.RenderPass.prototype={render:function(e,t,r){this.scene.overrideMaterial=this.overrideMaterial,this.clearColor&&(this.oldClearColor.copy(e.getClearColor()),this.oldClearAlpha=e.getClearAlpha(),e.setClearColor(this.clearColor,this.clearAlpha)),e.render(this.scene,this.camera,r,this.clear),this.clearColor&&e.setClearColor(this.oldClearColor,this.oldClearAlpha),this.scene.overrideMaterial=null}},THREE.ShaderPass=function(e,t){this.textureID=void 0!==t?t:"tDiffuse",this.uniforms=THREE.UniformsUtils.clone(e.uniforms),this.material=new THREE.ShaderMaterial({uniforms:this.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader}),this.renderToScreen=!1,this.enabled=!0,this.needsSwap=!0,this.clear=!1,this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1),this.scene=new THREE.Scene,this.quad=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),null),this.scene.add(this.quad)},THREE.ShaderPass.prototype={render:function(e,t,r){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=r),this.quad.material=this.material,this.renderToScreen?e.render(this.scene,this.camera):e.render(this.scene,this.camera,t,this.clear)}};